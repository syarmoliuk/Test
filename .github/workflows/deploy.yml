name: ðŸŸ¢ Deploy

on:
  workflow_run:
    workflows:
      - Build Docker image
    types:
      - completed
  workflow_dispatch:
  workflow_call:

run-name: deploy ${{ github.event.repository.name }} app


jobs:
  get-build-docker-image-context:
    name: Get context
    #    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{github.event.repository.name}}
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
#          path:

      - name: Read image reference
        id: read_image_reference
        run:  |
          echo "image-ref=$(cat ECR_IMAGE_REF)" >> $GITHUB_OUTPUT

#      - name: Check directory files
#          run: ls -all
#
#        - name: Rename artifacts
#          run: mv ECR_IMAGE_REF ${{github.event.repository.name}}.zip
#
#        - name: Check directory files
#          run: ls -all
#
#        - run: unzip ${{github.event.repository.name}}.zip .
#
#        - name: Get context data
#          id: get-context-data
#          uses: actions/github-script@v7
#          with:
#            script: |
#              let fs = require('fs');
#              let data = fs.readFileSync('ECR_IMAGE_REF');
#              return JSON.parse(data)
    outputs:
      image-ref: ${{steps.read_image_reference.outputs.image-ref}}

  print-context:
    name: Print context
    needs: get-build-docker-image-context
    runs-on: ubuntu-latest
    env:
      REF: ${{needs.get-build-docker-image-context.outputs.image-ref}}
#      IMG: ${{needs.get-build-docker-image-context.outputs.image}}
#      TAG: ${{needs.get-build-docker-image-context.outputs.image-tag}}
    steps:
      - name: Get context and print it
        run: |
          echo "Image reference value is: $REF"
#          echo "Image value is: $IMG"
#          echo "Tag value is: $TAG"


  send-event-for-deployment-on-test-env:
    needs: deploy-service-to-dev
    runs-on: ubuntu-latest
    steps:
      - name: Send dispatch event for deploy udbud on test env
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GA_GITHUB_TOKEN }}
          event-type: acceptance-tests-passed-and-${{ github.event.repository.name }}-dev-deployed
          client-payload: '{ "github": ${{ toJson(github) }}, "CALLER_REPO_FULL_NAME": "${{ github.event.repository.full_name }}" , "CALLER_REPO_NAME" : "${{ github.event.repository.name }}" , "RUN_ID": "${{ github.run_id }}"}'

